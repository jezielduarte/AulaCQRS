// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository.Contex;

namespace Aula.DDD.CQRS.Infra.Migrations
{
    [DbContext(typeof(PostgreContext))]
    [Migration("20220316192809_Start")]
    partial class Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Aula.DDD.CQRS.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<Guid>("AccountHolderId")
                        .HasColumnType("uuid")
                        .HasColumnName("ACCOUNT_HOLDER_ID");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NUMBER");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("ACCOUNT_TYPE");

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("AGENCY");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal")
                        .HasColumnName("BALANCE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<decimal>("Overdraft")
                        .HasColumnType("decimal")
                        .HasColumnName("OVERDRAFT");

                    b.Property<string>("UserOverdraftReleaser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("USER_OVERDRAFT_RELEASE");

                    b.HasKey("Id");

                    b.HasIndex("AccountHolderId");

                    b.ToTable("TB_ACCOUNT");
                });

            modelBuilder.Entity("Aula.DDD.CQRS.Domain.Accounts.AccountHolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("TB_ACCOUNT_HOLDER");
                });

            modelBuilder.Entity("Aula.DDD.CQRS.Domain.Accounts.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("ACCOUNT_ID");

                    b.Property<decimal>("Ammount")
                        .HasColumnType("numeric")
                        .HasColumnName("AMMOUNT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DATE");

                    b.Property<int>("Operation")
                        .HasColumnType("int")
                        .HasColumnName("OPERATION");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("TB_TRANSACTION");
                });

            modelBuilder.Entity("Aula.DDD.CQRS.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<bool>("AllowsOpenAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ALLOWS_OPEN_ACCOUNT");

                    b.Property<bool>("AllowsReleaseOverdraft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ALLOWS_RELEASE_OVERDRAFT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("PASS");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.ToTable("TB_USER");
                });

            modelBuilder.Entity("Aula.DDD.CQRS.Domain.Accounts.Account", b =>
                {
                    b.HasOne("Aula.DDD.CQRS.Domain.Accounts.AccountHolder", "AccountHolder")
                        .WithMany()
                        .HasForeignKey("AccountHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountHolder");
                });

            modelBuilder.Entity("Aula.DDD.CQRS.Domain.Accounts.Transaction", b =>
                {
                    b.HasOne("Aula.DDD.CQRS.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
